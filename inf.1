'\" t
.\"     Title: inf
.\"    Author: [see the "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 07/02/2025
.\"    Manual: INF Manual
.\"    Source: INF 1.2.0
.\"  Language: English
.\"
.TH "INF" "1" "07/02/2025" "INF 1\&.2\&.0" "INF Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
inf \- instant feedback for your compile and run loop
.SH "SYNOPSIS"
.sp
\fBinf\fR [\fIoptions\fR] [\fIcompile_cmd\fR]
.SH "DESCRIPTION"
.sp
\fBinf\fR monitors files and executes the given commands whenever they change\&. It is a small wrapper around \fBentr\fR(1) that provides convenience flags for common development workflows\&.
.SH "OPTIONS"
.PP
\fB\-r\fR, \fB\-\-run\fR \fIrun_cmd\fR
.RS 4
Execute
\fIrun_cmd\fR
after
\fIcompile_cmd\fR
finishes successfully\&.
.RE
.PP
\fB\-i\fR, \fB\-\-input\fR \fIinput_file\fR
.RS 4
Pipe
\fIinput_file\fR
to
\fIrun_cmd\fR
on standard input\&.
.RE
.PP
\fB\-m\fR, \fB\-\-monitor\fR \fIfile\fR[,\fIfile\fR\&...]
.RS 4
Append file(s) to the list of paths to monitor\&.
.RE
.PP
\fB\-n\fR, \fB\-\-noparse\fR
.RS 4
Skip search for *\&.* files in
\fIcompile_cmd\fR\&.
.RE
.PP
\fB\-x\fR, \fB\-\-refresh\fR
.RS 4
Recompile immediately whenever any monitored file changes (disables the interactive shell)\&.
.RE
.PP
\fB\-p\fR, \fB\-\-postpone\fR
.RS 4
Wait for a change in a monitored file before the first compilation\&.
.RE
.PP
\fB\-q\fR, \fB\-\-quiet\fR
.RS 4
Suppress compiler output\&.
.RE
.PP
\fB\-w\fR, \fB\-\-waitkey\fR
.RS 4
Wait for a key press before each recompilation\&.
.RE
.PP
\fB\-z\fR, \fB\-\-zen\fR
.RS 4
Disable meta\-headers output\&.
.RE
.PP
\fB\-v\fR, \fB\-\-verbose\fR
.RS 4
Always print compiler output (overrides
\fB\-q, \-\-quiet\fR)\&.
.RE
.PP
\fB\-d\fR, \fB\-\-debug\fR
.RS 4
Print the parsed arguments and exit\&.
.RE
.PP
\fB\-V\fR, \fB\-\-version\fR
.RS 4
Display version information and exit\&.
.RE
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Show usage information\&.
.RE
.SH "EXAMPLES"
.sp
Rebuild and run when main\&.c changes:
.sp
.if n \{\
.RS 4
.\}
.nf
$ inf \-\-run \&./main gcc \-o main main\&.c
.fi
.if n \{\
.RE
.\}
.sp
Pipe input into the binary when either main\&.c or input\&.txt changes:
.sp
.if n \{\
.RS 4
.\}
.nf
$ inf \-\-input input\&.txt \-\-run \&./main gcc \-o main main\&.c
.fi
.if n \{\
.RE
.\}
.sp
For build systems, list every source file that should trigger a rebuild\&. Here the shell expands the globs and pipes them into inf (inf monitors all *\&.c and *\&.h files in src/):
.sp
.if n \{\
.RS 4
.\}
.nf
$ echo src/*\&.c src/*\&.h | inf \-\-run "make test" make \-j4
.fi
.if n \{\
.RE
.\}
.sp
Run a static type checker in \fIzen\fR mode (no meta\-headers), whenever any Python file in src/ or its subdirectories changes:
.sp
.if n \{\
.RS 4
.\}
.nf
$ inf \-z mypy src/**/*\&.py
.fi
.if n \{\
.RE
.\}
.SH "AUTHOR"
.sp
Nikolai Oplachko
.SH "SEE ALSO"
.sp
\fBentr\fR(1)
