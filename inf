#!/bin/bash
set -e

usage() {
    printf 'Usage: %s [ARGS] COMPILE_CMD\n' "$(basename "$0")"
    printf '\t-r | --run      : Target execution command\n'
    printf '\t-i | --input    : Input file\n'
    printf '\t-m | --monitor  : Extra comma-separated files to trigger recompilation\n'
    printf '\t                  (may be passed multiple times, e.g. for globs)\n'
    printf '\t-n | --noparse  : Don'"'"'t look for *.* names patterns in compile command\n'
    printf '\t-x | --refresh  : Restart compilation immediately on files change\n'
    printf '\t-p | --postpone : Start only after the first change\n'
    printf '\t-w | --waitkey  : Wait for keypress before compilation\n'
    printf '\t-z | --zen      : Show only commands output\n'
    printf '\t-v | --verbose  : Verbose compiler output\n'
    printf '\t-d | --debug    : Print and validate parsed arguments\n'
    printf '\t-h | --help     : Print this message\n'
}

compileAndRun() {
    if [[ ${waitkey} == 1 ]]; then
        read -p "<press key to run>" -n1 -s -r
        printf "\n"
    fi
    UNBUFFER=$(hash unbuffer &>/dev/null && printf 'unbuffer')
    if [[ ${nocompile} != 1 ]]; then
        if [[ ${zen} != 1 ]]; then
            printf '\033[1;34m[compilation: %s]\033[0m\n' "${compileCmd}"
        fi
    fi

    # In case of executing compile target
    # suppress stdout of compile command
    # if not requested `verbose` for cleanliness
    if [[ ${norun} != 1 ]]; then
        if [[ ${nocompile} != 1 ]]; then
            if [[ ${verbose} == 1 ]]; then
                eval "${compileCmd}"
            else
                { local compileStdout; \
                  compileStdout=$(eval "${UNBUFFER} ${compileCmd}" 2>&3 3>&-); } 3>&1
            fi
            local compileCode=$?
        fi
        if [[ ${nocompile} == 1 || ${compileCode} == 0 ]]; then
            if [[ ${zen} != 1 ]]; then
                printf '\033[1;32m%s\033[0m\n' "${runCmd}"
            fi
            eval "${runCmd}"
            local runCode=$?
            if [[ "${runCode}" != 0 ]]; then
                printf '\033[1;31m[exit code = %s]\033[0m\n' "${runCode}"
            else
                if [[ ${zen} != 1 ]]; then
                    printf '\033[1;32m[execution succeeded]\033[0m\n'
                fi
            fi
        elif [[ ${verbose} != 1 ]]; then
            # Spit stdout of compilation command
            # even in case of non-verbose output
            # if the compilation command failed
            printf '%s' "${compileStdout}"
        fi
    elif [[ ${nocompile} != 1 ]]; then
        if eval "${compileCmd}"; then
            if [[ ${zen} != 1 ]]; then
                printf '\033[1;32mCompilation succeeded!\033[0m\n'
            fi
        fi
    fi
}

add_monitor_files() {
    local newFiles
    IFS=',' read -r -a newFiles <<< "$1"
    for file in "${newFiles[@]}"; do
        # expand relative paths
        file="${file/#\~/${HOME}}"
        file="$(realpath "${file}")"
        monitorFiles+=("${file}")
    done
}

parse_args() {
    monitorFiles=()
    while [[ "$1" != "" ]]; do
        case "$1" in
                -r | --run       ) runCmd="$2"            ; shift;;
                -i | --input     ) inputfile="$2"         ; shift;;
                -m | --monitor   ) while [[ $# -ge 2 && "$2" != -* ]]; do
                                       add_monitor_files "$2"
                                       shift
                                   done;;
                -n | --noparse   ) noparse=1                     ;;
                -x | --refresh   ) refresh=1                     ;;
                -p | --postpone  ) postpone=1                    ;;
                -w | --waitkey   ) waitkey=1                     ;;
                -z | --zen       ) zen=1                         ;;
                -v | --verbose   ) verbose=1                     ;;
                -d | --debug     ) debug=1                       ;;
                -h | --help      ) usage                  ;  exit;;
                 - | --          )                   shift; break;;
                 -*              ) printf '\033[1;31mUnknown option: %s\033[0m\n' "$1" >&2; exit 1;;
                 *               )                          break;;
        esac
        shift
    done

    # Compile command is the rest consisting of non-parsed arguments
    compileCmd="$*"
    if [[ -z ${compileCmd} ]]; then
        unset compileCmd
        nocompile=1
    fi
    if [[ -z ${inputfile+x} ]]; then
        noinput=1
    fi
    if [[ -z ${runCmd+x} ]]; then
        norun=1
    elif [[ ${noinput} != 1 ]]; then
        runCmd="${runCmd} <${inputfile}"
    fi
    if [[ ${noinput} != 1 && ${norun} != 1 ]]; then
        monitorFiles+=("${inputfile}")
    fi

    # Search for *.* file names patterns in compile command
    # and monitor changes in such files
    if [[ ${noparse} != 1 && ${nocompile} != 1 ]]; then
        regex='^[^[:space:]]+\.[^[:space:]]+$'
        local compileArgs
        read -ra compileArgs <<<"${compileCmd}"
        for arg in "${compileArgs[@]}"; do
            if [[ "${arg}" =~ ${regex} && -f "${arg}" ]]; then
                monitorFiles+=("${arg}")
            fi
        done
    fi
}

debug_print_args() {
    if [[ ${debug} != 1 ]]; then
        return
    fi
    args_list=("compileCmd" "runCmd" "inputfile"
        "noparse" "refresh" "nocompile" "norun" "noinput"
        "verbose" "postpone" "waitkey" "zen" "debug")
    printf '\033[1;32mParsed arguments:\033[0m\n'
    for arg in "${args_list[@]}"; do
        if [[ -n ${!arg+x} ]]; then
            printf '\033[0;34m%s\033[0m=%s\n' "${arg}" "${!arg}"
        fi
    done
    printf '\033[0;34m%s[*]\033[0m=%s\n' "monitorFiles" "${monitorFiles[*]}"
}

parse_input() {
    # If no files are piped into the script
    # then do nothing
    # else treat it as a list of files to monitor
    if [[ -t 0 ]]; then
        return
    fi
    while read -r line; do
        for file in ${line}; do
            monitorFiles+=("${file}")
        done
    done
}

error() {
    code=$1
    errorMessage=$2
    printf '\033[0;31mERROR: %s\033[0m\n' "${errorMessage}"
    exit "${code}"
}

validate_args() {
    mutual_exclusive=("nocompile,compileCmd" "norun,runCmd" "noinput,inputfile")
    for args in "${mutual_exclusive[@]}"; do
        IFS=',' read -r arg1 arg2 <<<"${args}"
        if [[ -z ${!arg1+x} && -z ${!arg2+x} ]]; then
            error 2 "$(printf 'None of "%s" or "%s" arguments are passed' "${arg1}" "${arg2}")"
        fi
        if [[ -n ${!arg1+x} && -n ${!arg2+x} ]]; then
            error 2 "$(printf 'Both "%s" and "%s" arguments are passed' "${arg1}" "${arg2}")"
        fi
    done
    # Fail if there is no files to monitor
    if [[ -z "${monitorFiles[*]}" ]]; then
        error 3 "no files to monitor"
    fi
    # Fail if some files required for monitoring don't exist
    missingFiles=()
    for f in "${monitorFiles[@]}"; do
        if [[ -n "${f}" && ! -f "${f}" ]]; then
            missingFiles+=("${f}")
        fi
    done
    if [[ ${#missingFiles[@]} != 0 ]]; then
        pref="file"
        [[ ${#missingFiles[@]} -gt 1 ]] && pref+="s"
        msg=$(printf 'missing %s ' "${pref}"; \
              printf '"%s" ' "${missingFiles[@]}")
        error 4 "${msg}"
    fi
}

export_args() {
    export nocompile
    export compileCmd
    export norun
    export runCmd
    export verbose
    export zen
    export waitkey
    if [[ ${postpone} == 1 ]]; then
        ENTR_EXTRA_ARGS+=("-p")
    fi
}

prepare_args() {
    parse_args "$@"
    parse_input
    debug_print_args
    validate_args
    export_args
    if [[ ${debug} == 1 ]]; then
        exit
    fi
}

main() {
    prepare_args "$@"
    export -f compileAndRun
    if [[ ${refresh} == 1 ]]; then
        printf '%s\n' "${monitorFiles[@]}" | \
            entr -rac "${ENTR_EXTRA_ARGS[@]}" bash -c compileAndRun
    else
        printf '%s\n' "${monitorFiles[@]}" | \
            entr -ac "${ENTR_EXTRA_ARGS[@]}" bash -c compileAndRun
    fi
}

main "$@"
