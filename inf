#!/usr/bin/env bash
set -euo pipefail

version_info() {
    printf 'inf 1.2.0\n'
}

color_enabled() { [[ -t 1 && -z ${NO_COLOR:-} ]]; }

refresh_screen() { [[ -t 1 && -z ${NO_REFRESH:-} ]]; }

set_colors() {
    export COL_BLUE="$1" COL_GREEN="$2" COL_RED="$3" COL_CYAN="$4" COL_RESET="$5"
}

usage() {
    printf 'Usage: %s [ARGS] [COMPILE_CMD]\n' "$(basename "$0")"
    printf '\t-r | --run      : Target execution command\n'
    printf '\t-i | --input    : Input file\n'
    printf '\t-m | --monitor  : Comma separated list of files to trigger recompilation\n'
    printf '\t-n | --noparse  : Don'"'"'t look for *.* names patterns in compile command\n'
    printf '\t-x | --refresh  : Restart compilation immediately on files change\n'
    printf '\t-p | --postpone : Start only after the first change\n'
    printf '\t-q | --quiet    : Suppress all compiler output\n'
    printf '\t-w | --waitkey  : Wait for keypress before compilation\n'
    printf '\t-z | --zen      : Show only commands output\n'
    printf '\t-v | --verbose  : Always print compiler output\n'
    printf '\t-d | --debug    : Print the parsed arguments and exit\n'
    printf '\t-h | --help     : Print this message and exit\n'
    printf '\t-V | --version  : Print version info and exit\n'
}

run_compile() {
    if [[ ${verbose} == 1 ]]; then
        eval "${compileCmd}"
    else
        if [[ ${quiet} == 1 ]]; then
            compileStdout=$(eval "${UNBUFFER} ${compileCmd}" 2>&1)
        else
            {
                compileStdout=$(eval "${UNBUFFER} ${compileCmd}" 2>&3 3>&-)
            } 3>&1
        fi
    fi
    compileCode=$?
    return ${compileCode}
}

run_target() {
    if [[ ${zen} != 1 ]]; then
        printf '%b%s%b\n' "${COL_GREEN}" "${runCmd}" "${COL_RESET}"
    fi
    eval "${runCmd}"
    local runCode=$?
    if [[ ${runCode} != 0 ]]; then
        printf '%b[exit code = %s]%b\n' "${COL_RED}" "${runCode}" "${COL_RESET}"
    else
        if [[ ${zen} != 1 ]]; then
            printf '%b[execution succeeded]%b\n' "${COL_GREEN}" "${COL_RESET}"
        fi
    fi
}

compileAndRun() {
    if [[ ${waitkey} == 1 ]]; then
        read -p "<press key to run>" -n1 -s -r
        printf "\n"
    fi
    UNBUFFER=$(hash unbuffer &>/dev/null && printf 'unbuffer')
    if [[ ${nocompile} != 1 && ${zen} != 1 ]]; then
        printf '%b[compilation: %s]%b\n' "${COL_BLUE}" "${compileCmd}" "${COL_RESET}"
    fi

    if [[ ${norun} != 1 ]]; then
        if [[ ${nocompile} != 1 ]]; then
            run_compile
        fi
        if [[ ${nocompile} == 1 || ${compileCode} == 0 ]]; then
            run_target
        elif [[ ${verbose} != 1 ]]; then
            printf '%s' "${compileStdout}"
        fi
    elif [[ ${nocompile} != 1 ]]; then
        if run_compile; then
            if [[ ${zen} != 1 ]]; then
                printf '%bCompilation succeeded!%b\n' "${COL_GREEN}" "${COL_RESET}"
            fi
        fi
    fi
}

add_monitor_files() {
    local newFiles
    IFS=',' read -r -a newFiles <<<"$1"
    for file in "${newFiles[@]}"; do
        # expand relative paths
        file="${file/#\~/${HOME}}"
        file="$(realpath "${file}")"
        monitorFiles+=("${file}")
    done
}

get_flag_value() {
    local flag="$1"
    shift

    if [[ $# -eq 0 || "$1" == -* ]]; then
        error 1 "option $flag requires a value"
    fi

    printf '%s\n' "$1"
}

parse_args() {
    noparse=0
    refresh=0
    postpone=0
    quiet=0
    waitkey=0
    zen=0
    verbose=0
    debug=0
    nocompile=0
    norun=0
    noinput=0
    monitorFiles=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
                -r | --run       ) runCmd=$(get_flag_value "$@")         ; shift;;
                -i | --input     ) inputfile=$(get_flag_value "$@")      ; shift;;
                -m | --monitor   ) add_monitor_files "$(get_flag_value "$@")"  ; shift;;
                -n | --noparse   ) noparse=1                     ;;
                -x | --refresh   ) refresh=1                     ;;
                -p | --postpone  ) postpone=1                    ;;
                -q | --quiet     ) quiet=1 ;;
                -w | --waitkey   ) waitkey=1                     ;;
                -z | --zen       ) zen=1                         ;;
                -v | --verbose   ) verbose=1                     ;;
                -d | --debug     ) debug=1                       ;;
                -h | --help      ) usage                  ;  exit;;
                -V | --version   ) version_info           ;  exit;;
                 - | --          )                   shift; break;;
                 -*              )
                   error 1 "$(printf 'unknown option %s' "$1")" ;;
                 *               )                          break;;
        esac
        shift
    done

    # Compile command is the rest consisting of non-parsed arguments
    compileCmd="$*"
    if [[ -z ${compileCmd} ]]; then
        unset compileCmd
        nocompile=1
    fi
    if [[ -z ${inputfile+x} ]]; then
        noinput=1
    fi
    if [[ -z ${runCmd+x} ]]; then
        norun=1
    elif [[ ${noinput} != 1 ]]; then
        runCmd="${runCmd} <${inputfile}"
    fi
    if [[ ${noinput} != 1 && ${norun} != 1 ]]; then
        monitorFiles+=("${inputfile}")
    fi

    # Search for *.* file names patterns in compile command
    # and monitor changes in such files
    if [[ ${noparse} != 1 && ${nocompile} != 1 ]]; then
        regex='^[^[:space:]]+\.[^[:space:]]+$'
        local compileArgs
        read -ra compileArgs <<<"${compileCmd}"
        for arg in "${compileArgs[@]}"; do
            if [[ "${arg}" =~ ${regex} && -f "${arg}" ]]; then
                monitorFiles+=("${arg}")
            fi
        done
    fi
}

debug_print_args() {
    if [[ ${debug} != 1 ]]; then
        return
    fi
    args_list=("compileCmd" "runCmd" "inputfile"
        "noparse" "refresh" "nocompile" "norun" "noinput"
        "verbose" "postpone" "quiet" "waitkey" "zen" "debug")
    printf '%bParsed arguments:%b\n' "${COL_GREEN}" "${COL_RESET}"
    for arg in "${args_list[@]}"; do
        if [[ -n ${!arg+x} ]]; then
            printf '%b%s%b=%s\n' "${COL_CYAN}" "${arg}" "${COL_RESET}" "${!arg}"
        fi
    done
    printf '%b%s[*]%b=%s\n' "${COL_CYAN}" "monitorFiles" "${COL_RESET}" "${monitorFiles[*]}"
}

parse_input() {
    # If no files are piped into the script
    # then do nothing
    # else treat it as a list of files to monitor
    if [[ -t 0 ]]; then
        return
    fi
    while read -r line; do
        for file in ${line}; do
            add_monitor_files "${file}"
        done
    done
}

error() {
    code=$1
    errorMessage=$2
    printf '%bERROR: %s%b\n' "${COL_RED}" "${errorMessage}" "${COL_RESET}" >&2
    exit "${code}"
}

validate_args() {
    mutual_exclusive=("nocompile,compileCmd" "norun,runCmd" "noinput,inputfile")
    for args in "${mutual_exclusive[@]}"; do
        IFS=',' read -r arg1 arg2 <<<"${args}"
        if [[ -z ${!arg1+x} && -z ${!arg2+x} ]]; then
            error 2 "$(printf 'None of "%s" or "%s" arguments are passed' "${arg1}" "${arg2}")"
        fi
        if [[ ${!arg1} == 1 && -n ${!arg2+x} ]]; then
            error 2 "$(printf 'Both "%s" and "%s" arguments are passed' "${arg1}" "${arg2}")"
        fi
    done
    # Fail if there is no files to monitor
    if [[ -z "${monitorFiles[*]}" ]]; then
        error 3 "no files to monitor"
    fi
    # Fail if some files required for monitoring don't exist
    missingFiles=()
    for f in "${monitorFiles[@]}"; do
        if [[ -n "${f}" && ! -f "${f}" ]]; then
            missingFiles+=("${f}")
        fi
    done
    if [[ ${#missingFiles[@]} != 0 ]]; then
        pref="file"
        [[ ${#missingFiles[@]} -gt 1 ]] && pref+="s"
        msg=$(printf 'missing %s ' "${pref}"
              printf '"%s" ' "${missingFiles[@]}")
        error 4 "${msg}"
    fi
}

setup() {
    if color_enabled; then
        set_colors '\033[1;34m' '\033[1;32m' '\033[1;31m' '\033[0;34m' '\033[0m'
    else
        set_colors '' '' '' '' ''
    fi
}

export_args() {
    export nocompile
    export compileCmd
    export norun
    export quiet
    export runCmd
    export verbose
    export zen
    export waitkey
    if [[ ! -t 1 ]]; then
        ENTR_EXTRA_ARGS+=("-n")
    fi
    if refresh_screen; then
        ENTR_EXTRA_ARGS+=("-c")
    fi
    if [[ ${postpone} == 1 ]]; then
        ENTR_EXTRA_ARGS+=("-p")
    fi
}

prepare_args() {
    parse_args "$@"
    parse_input
    debug_print_args
    validate_args
    export_args
    if [[ ${debug} == 1 ]]; then
        exit
    fi
}

main() {
    setup
    if [[ $# -eq 0 ]]; then
        usage
        exit
    fi
    prepare_args "$@"
    export -f compileAndRun run_compile run_target
    if [[ ${refresh} == 1 ]]; then
        printf '%s\n' "${monitorFiles[@]}" |
            entr -ra "${ENTR_EXTRA_ARGS[@]}" bash -c compileAndRun
    else
        printf '%s\n' "${monitorFiles[@]}" |
            entr -a "${ENTR_EXTRA_ARGS[@]}" bash -c compileAndRun
    fi
}

main "$@"
